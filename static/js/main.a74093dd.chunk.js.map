{"version":3,"sources":["components/Home.js","components/Join.js","components/Mission.js","components/Program.js","components/Staff.js","components/Stories.js","components/About.js","components/Contact.js","App.js","serviceWorker.js","index.js"],"names":["Home","Container","Jumbotron","className","Button","variant","ListGroup","ListGroupItem","Join","Mission","Program","Staff","Stories","About","Contact","App","props","basename","process","Navbar","bg","expand","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Link","to","NavDropdown","title","Item","Divider","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a74093dd.chunk.js","sourcesContent":["import React from 'react'\nimport { Container, Jumbotron, Button, ListGroup, ListGroupItem } from 'react-bootstrap'\nimport { Link } from 'react-router-dom'\n\nconst Home = () => {\n  return (\n    <>\n      <Container>\n      <Jumbotron className='mt-5'>\n        <h1>UliftU</h1>\n        <p>\n          UliftU prepares re-entering citizens for meaningful careers in the fitness industry\n        </p>\n        <p>\n          <Button variant=\"primary\">Learn how</Button>\n        </p>\n      </Jumbotron>\n        <h1>Our Mission</h1>\n        <p>\n          Generate employment opportunties and promote wellness in underserved communities.\n        </p>\n        <h1>\n          Job Training Program\n        </h1>\n        <p>Preparing participants for for holistic wellness. UliftU empowers re-entering citizens to become strong leaders in their own lives and communities</p>\n        <h1>\n          Successes\n        </h1>\n        <p>\n          Highlight a few participants here\n        </p>\n        <h1>\n          Fitness Classes & Events\n        </h1>\n        <p>\n          Next Event: Fitnes Class @ Martin Luther King Jr. Recreation Center\n        </p>\n        <p>\n          <Link>View all classes</Link>\n        </p>\n        <h1>\n          Supporters\n        </h1>\n        <p>\n          Generous program support provided by the following organziations:\n        </p>\n        <ListGroup>\n          <ListGroupItem>International Marketing Systems</ListGroupItem>\n          <ListGroupItem>Avalanche Granola</ListGroupItem>\n          <ListGroupItem>Independence Blue Cross Foundation</ListGroupItem>\n          <ListGroupItem>CrossFit Foundation</ListGroupItem>\n        </ListGroup>\n        <h1>\n          Community Partners\n        </h1>\n        <ListGroup>\n          <ListGroupItem>Partner 1</ListGroupItem>\n          <ListGroupItem>Organization A</ListGroupItem>\n          <ListGroupItem>You! <Link>Become a supporter of UliftU</Link></ListGroupItem>\n        </ListGroup>\n      </Container>\n    </>\n  )\n}\n\nexport default Home\n","import React from 'react'\n\nconst Join = () => {\n  return (\n    <h1>Join</h1>\n  )\n}\n\nexport default Join\n","import React from 'react'\n\nconst Mission = () => {\n  return (\n    <h1>Mission</h1>\n  )\n}\n\nexport default Mission\n","import React from 'react'\n\nconst Program = () => {\n  return (\n    <h1>Program</h1>\n  )\n}\n\nexport default Program\n","import React from 'react'\n\nconst Staff = () => {\n  return (\n    <h1>Staff</h1>\n  )\n}\n\nexport default Staff\n","import React from 'react'\n\nconst Stories = () => {\n  return (\n    <h1>Stories</h1>\n  )\n}\n\nexport default Stories\n","import React from 'react'\nimport { Jumbotron } from 'react-bootstrap'\nconst About = () => {\n\n  return (\n    <Jumbotron>\n      At UliftU, our mission is to provide the tools for the unemployed, re-entering, citizens and homeless to achieve wellness. We do this through our job training program\n\nUliftU is a 501c3, nonprofit organization and was founded by Wylie Belasik as the non-profit arm of CrossFit Center City and Subversus Fitness.\n    </Jumbotron>\n  )\n}\n\nexport default About\n","import React from 'react'\n\nconst Contact = () => {\n  return (\n    <h1>Contact</h1>\n  )\n}\n\nexport default Contact\n","import React, { useState, useEffect } from 'react';\nimport { Navbar, Nav, NavDropdown, Form, FormControl, Button } from 'react-bootstrap'\n\nimport { HashRouter as Router,\n  Link,\n  Switch,\n  Route } from 'react-router-dom'\n\nimport Home from './components/Home'\nimport Join from './components/Join'\nimport Mission from './components/Mission'\nimport Program from './components/Program'\nimport Staff from './components/Staff'\nimport Stories from './components/Stories'\nimport About from './components/About'\nimport Contact from './components/Contact'\n\nimport './App.css';\n\nconst App = (props) => {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n        <Navbar bg=\"light\" expand=\"lg\">\n          <Navbar.Brand href=\"#home\">uliftu</Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n          <Navbar.Collapse id=\"basic-navbar-nav\">\n            <Nav className=\"mr-auto\">\n              <Nav.Link><Link to='/'>Home</Link></Nav.Link>\n              <Nav.Link><Link to='/program'>Program</Link></Nav.Link>\n              <Nav.Link><Link to='/join'>Join</Link></Nav.Link>\n              <NavDropdown title=\"About\" id=\"basic-nav-dropdown\">\n                <NavDropdown.Item href=\"#action/3.1\"><Link to='/staff'>Staff</Link></NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.2\"><Link to='/mission'>Mission</Link></NavDropdown.Item>\n                <NavDropdown.Item href=\"#action/3.3\"><Link to='/contact'>Contact</Link></NavDropdown.Item>\n                <NavDropdown.Divider />\n                <NavDropdown.Item href=\"#action/3.4\">Additional Links</NavDropdown.Item>\n              </NavDropdown>\n            </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n\n        <Switch>\n          <Route exact path='/' component={Home}/>\n          <Route path='/about' component={About}/>\n          <Route path='/join' component={Join}/>\n          <Route path='/contact' component={Contact}/>\n          <Route path='/stories' component={Stories}/>\n          <Route path='/staff' component={Staff}/>\n          <Route path='/mission' component={Mission} />\n          <Route path='/program' component={Program}/>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}